#!/bin/bash
set -e
echo "-----> Deploying nginx..."
APP="$1"; PORT="$2"
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )" #this directory
APP_PATH="/home/dokku/$APP"
VHOST_PATH="$APP_PATH/VHOST"
SSL_DIR="$HOME/$APP/ssl"

# Check if a VHOST exists. If not, default to proxying the server's hostname
# (which may not always be correct, but worth a try).
if [[ ! -f $VHOST_PATH ]]; then
  echo "-----> Creating new $VHOST_PATH with hostname: $HOSTNAME..."
  echo "$HOSTNAME" > $VHOST_PATH
fi

# Remove old nginx.conf if exists
rm $APP_PATH/nginx.conf
# Add once-off configuration options. These should NOT go in the .conf
# templates because the .conf templates are meant to be appendable for
# multiple domains.
echo "upstream $APP { server 127.0.0.1:$PORT; }" > $APP_PATH/nginx.conf

# Put list of VHOST domains in variable. This will be overridden if SSL for
# some domains are enabled.
NONSSL_VHOSTS=`cat $VHOST_PATH`

# Check if SSL should be enabled
if [[ -f "$SSL_DIR/server.crt" ]] && [[ -f "$SSL_DIR/server.key" ]]; then
  # Make sure that the domain name of the SSL certificate matches an entry
  # in the VHOST file. (It's okay if the SSL certificate is a wildcard
  # subdomain, as long as there are matches in VHOST.)
  NGINX_CONF="$DIR/nginx.ssl.conf"

  # Ability to override default configuration files
  # (If a nginx.ssl.template file exists in the $HOME/$APP directory, use that
  # instead.)
  APP_NGINX_SSL_TEMPLATE="$HOME/$APP/nginx.ssl.template"
  if [[ -f $APP_NGINX_SSL_TEMPLATE ]]; then
    echo '-----> Overriding default SSL nginx.conf with detected nginx.ssl.template...'
    NGINX_CONF=$APP_NGINX_SSL_TEMPLATE
  fi

  SSL_HOSTNAME=`openssl x509 -in $SSL_DIR/server.crt -noout -subject | tr '/' '\n' | grep CN= | cut -c4-`
  # Prepare the hostname so that it satisfies grep's regex syntax.
  # e.g. mydomain.com -> mydomain\.com
  #      *.mydomain.com -> .*\.mydomain\.com
  SSL_HOSTNAME=`echo "$SSL_HOSTNAME" | sed 's|\.|\\.|g' | sed 's/\*/\.\*/g'`
  SSL_VHOSTS=`grep "$SSL_HOSTNAME" $VHOST_PATH`
  NONSSL_VHOSTS=`grep -v "$SSL_HOSTNAME" $VHOST_PATH` #-v flag means inverse

  # For each domain that satisfies the SSL certificate, set up nginx under
  # the SSL template.
  while read line; do
    echo "-----> Configuring SSL for $line..."
    SERVER_NAME=$line
    eval "cat <<< \"$(< $NGINX_CONF)\" >> $HOME/$APP/nginx.conf"
  done <<< "$SSL_VHOSTS"
fi

# Now handle non-SSL domains
# default nginx.conf
NGINX_CONF="$DIR/nginx.conf"

# Ability to override default configuration files
# (If a nginx.template file exists in the $HOME/$APP directory, use that
# instead.)
APP_NGINX_TEMPLATE="$HOME/$APP/nginx.template"
if [[ -f $APP_NGINX_TEMPLATE ]]; then
  echo '-----> Overriding default nginx.conf with detected nginx.template...'
  NGINX_CONF=$APP_NGINX_TEMPLATE
fi

# The VHOST file can contain more than one custom domain. We add each to the
# server_name parameter of nginx.
cat $VHOST_PATH | xargs -i \
  echo "-----> Configuring {}..."
SERVER_NAME=`echo $NONSSL_VHOSTS | tr '\n' ' '`

eval "cat <<< \"$(< $NGINX_CONF)\" >> $HOME/$APP/nginx.conf"

pluginhook nginx-pre-reload $APP
echo '-----> Reloading nginx...'
nc -U $HOME/reload-nginx
